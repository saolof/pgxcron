// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package history

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createJobRunStmt, err = db.PrepareContext(ctx, createJobRun); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJobRun: %w", err)
	}
	if q.getRecentRunsStmt, err = db.PrepareContext(ctx, getRecentRuns); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentRuns: %w", err)
	}
	if q.lastDatabaseStatusStmt, err = db.PrepareContext(ctx, lastDatabaseStatus); err != nil {
		return nil, fmt.Errorf("error preparing query LastDatabaseStatus: %w", err)
	}
	if q.lastJobCompletedStatusStmt, err = db.PrepareContext(ctx, lastJobCompletedStatus); err != nil {
		return nil, fmt.Errorf("error preparing query LastJobCompletedStatus: %w", err)
	}
	if q.setDatabaseStatusStmt, err = db.PrepareContext(ctx, setDatabaseStatus); err != nil {
		return nil, fmt.Errorf("error preparing query SetDatabaseStatus: %w", err)
	}
	if q.setJobStatusStmt, err = db.PrepareContext(ctx, setJobStatus); err != nil {
		return nil, fmt.Errorf("error preparing query SetJobStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createJobRunStmt != nil {
		if cerr := q.createJobRunStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobRunStmt: %w", cerr)
		}
	}
	if q.getRecentRunsStmt != nil {
		if cerr := q.getRecentRunsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentRunsStmt: %w", cerr)
		}
	}
	if q.lastDatabaseStatusStmt != nil {
		if cerr := q.lastDatabaseStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lastDatabaseStatusStmt: %w", cerr)
		}
	}
	if q.lastJobCompletedStatusStmt != nil {
		if cerr := q.lastJobCompletedStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lastJobCompletedStatusStmt: %w", cerr)
		}
	}
	if q.setDatabaseStatusStmt != nil {
		if cerr := q.setDatabaseStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setDatabaseStatusStmt: %w", cerr)
		}
	}
	if q.setJobStatusStmt != nil {
		if cerr := q.setJobStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setJobStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	createJobRunStmt           *sql.Stmt
	getRecentRunsStmt          *sql.Stmt
	lastDatabaseStatusStmt     *sql.Stmt
	lastJobCompletedStatusStmt *sql.Stmt
	setDatabaseStatusStmt      *sql.Stmt
	setJobStatusStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		createJobRunStmt:           q.createJobRunStmt,
		getRecentRunsStmt:          q.getRecentRunsStmt,
		lastDatabaseStatusStmt:     q.lastDatabaseStatusStmt,
		lastJobCompletedStatusStmt: q.lastJobCompletedStatusStmt,
		setDatabaseStatusStmt:      q.setDatabaseStatusStmt,
		setJobStatusStmt:           q.setJobStatusStmt,
	}
}
